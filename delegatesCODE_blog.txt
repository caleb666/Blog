<h3>Delegate definition</h3>
<strong>A delegate is a pointer to a method (c# language element that allows referencing a method).</strong>
Delegates are used in event driven development instead of direct method calls, becuase during development we don't know which method should be used.
All we know during development - is which parameters to pass to this unknown method.

And this is where the delegate comes into the scene.

The program flow decides which method will be called during runtime.
And then passes the name of this method to the delegate as a parameter.

So we can see a delegate as a pipe that connects one end to another, where both ends of the pipe know nothing about each other.

Delegates are used to handle events. Everyone who tried event driven development, used delegates (often not even realising it).
Because delegates are the event handlers, called by events, when events are fired.

(Note that delegates are the element that does not belong to events exclusively. They can be used on their own, but events paradigm is the most common area where delegates can be found and associated with)

I will return to the events and show how to tie events with delegates later int this post, but let's first describe the most trivial example of delegate definition and usage.

<em>Example of delegate signature</em>

[code language=csharp]
   public delegate void myDelegate();
[/code]

The delegate keyword in this signature - behind the scenes tells the compiler to generate a <em><strong>CustomDelegate</strong> </em>class that inherits from other .NET framework delegate classes (<em><strong>MulticastDelegate</strong> </em>and <em><strong>Delegate</strong></em>). Scroll down to <em>Delegate inference</em> to read more about these classes.

If we removed <em><strong>delegate</strong> </em>keyword from the above definition, we would see a regular method stub.
And that's what delegate is - it's container for a method, which data will be injected into during runtime.

This delegate does not pass any parameters to a method, therefore it can be used to call a method that takes 0 parameters.

And this is how we can invoke it:

[code language=csharp]

static void Main(string[] args)
{
    //printMessage(); //this is how we normally call printMessage method.

    //calling printMessage() using a delegate
    myDelegate md = new myDelegate(printMessage); //define a md variable and assign printMessage method to it
    //in order for this to work, the delegate definition (return type and parameters data type and order must match the destination method - printMessage)

    md.Invoke(); //this is where printMessage is called through myDelegate

    Console.ReadLine();
}

static void printMessage()
{
     Console.WriteLine("Message printed by printMessage method");
}
[/code]

So, in this exmaple we are doing nothing more than invoking the printMessage() method via the delegate call.
And this will be result of doing it:
<img src="https://mikewaniewski.files.wordpress.com/2015/01/console1.png" />
<h3>Delegates behind the scenes</h3>
As I mentioned above, <em><strong>delegate</strong> </em>keyword in delegate definition creates <em><strong>CustomDelegate</strong> </em>class, that inherits from core .NET classes behind the scenes.

<em>The diagram below shows these classes:</em>
<img src="https://mikewaniewski.files.wordpress.com/2015/01/delegateclasses.png" />

It's important to know, that you can't inherit directly from <em><strong>Delegate</strong></em>, or <em><strong>MulticastDelegate</strong> </em>classes.
These classes are isolated, and you can only inherit from them using 'delegate' keyword.

Coming back to our example - I will use .NET Reflector to show what really happened when I defined <em><strong>myDelegate</strong></em>.

<img src="https://mikewaniewski.files.wordpress.com/2015/01/delegatereflection.png" />

And there we have it - <em><strong>MulticastDelegate</strong></em> and <em><strong>Delegate </strong></em>classes in base types of <em><strong>myDelegate</strong></em>.
<h3>
Delegate inference</h3>
I will now extend our example, so that the delegate will pass a string value to 2 functions:

[code language=csharp]
    class Program
    {
        static void Main(string[] args)
        {
            myDelegate md = null;
            md += printMessage;
            md += printMessage2;
            md.Invoke("testMessage");
            Console.ReadLine();
        }

        public delegate void myDelegate(string _myMessage);

        static void printMessage(string _msg)
        {
            Console.WriteLine(String.Format("Message printed by printMessage method: {0}", _msg));
        }

        static void printMessage2(string _msg)
        {
            Console.WriteLine(String.Format("Message printed by the second method: {0}", _msg));
        }
    }
[/code]

Result of running this app will be:

<img src="https://mikewaniewski.files.wordpress.com/2015/01/console2.png" />

Using a construction of:

[code language=csharp]
md += printMessage; //instead of: md += new myDelegate(printMessage);
[/code]

is very common when working with events.
This way you can assign as many event handlers to events as you need, using <strong>+=</strong> notation.
You can also use <strong>-=</strong> to detach event handler from the event.
Event handlers must only match with return type and arguments.
If they do, compiler will infer the appropriate delegate (in this case '<em>myDelegate</em>').
<h3>
Anonymous delegates</h3>
Delegates can also be defined anonymously if needed.
But of course we can only use anonymous delegate once, because there is no way to reference to it later.

<em>Anonymous delegate definition:</em>

[code language=csharp]
md += delegate(object sender2, CustomEventArgs e)
{
     Console.WriteLine(String.Format("call from anonymous delegate: {0} ", e.val1));
};  
[/code]

I will write next blog post about more advanced usage of delegates in event handling, with passing sender object reference and Custom event arguments.